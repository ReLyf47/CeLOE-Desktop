name: Build PyInstaller AppImage
on:
  push:
    branches:
      - main
      - master
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to build'
        required: false
        default: ''

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: archlinux:latest
    steps:
      - name: Update system and install base packages
        run: |
          pacman -Syu --noconfirm
          pacman -S --noconfirm base-devel git python python-pip wget fuse2 desktop-file-utils
          
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.tag || github.ref }}
          
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          
      - name: Build with PyInstaller
        run: |
          pyinstaller reminder.py \
            --onefile \
            --add-data "alarm:alarm" \
            --add-data "alarm1:alarm1" \
            --add-data "alarm24:alarm24" \
            --add-data "img:img" \
            --strip \
            --clean
            
      - name: Download AppImageTool
        run: |
          wget -O appimagetool.AppImage https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod +x appimagetool.AppImage
          
      - name: Prepare AppDir structure
        run: |
          mkdir -p AppDir/usr/bin
          mkdir -p AppDir/usr/share/applications
          mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps
          
          # Copy binary and resources
          cp dist/reminder AppDir/usr/bin/reminder
          cp -r alarm alarm1 alarm24 img AppDir/usr/bin/ 2>/dev/null || true
          chmod +x AppDir/usr/bin/reminder
          
          # Create desktop file
          cat > AppDir/usr/share/applications/reminder.desktop << EOF
          [Desktop Entry]
          Name=Reminder
          Comment=A reminder application
          Exec=reminder
          Icon=reminder
          Type=Application
          Categories=Utility;Office;
          Terminal=false
          StartupNotify=true
          EOF
          
          # Copy desktop file to AppDir root
          cp AppDir/usr/share/applications/reminder.desktop AppDir/
          
          # Handle icon
          if [ -f "img/icon.png" ]; then
            cp img/icon.png AppDir/usr/share/icons/hicolor/256x256/apps/reminder.png
            cp img/icon.png AppDir/reminder.png
          else
            # Create a simple fallback icon if none exists
            echo "Creating fallback icon..."
            mkdir -p /tmp/icon
            echo '<svg width="256" height="256" xmlns="http://www.w3.org/2000/svg"><rect width="256" height="256" fill="#4A90E2"/><text x="128" y="140" font-family="Arial" font-size="48" fill="white" text-anchor="middle">R</text></svg>' > /tmp/icon/reminder.svg
            # Convert to PNG if possible, otherwise just copy SVG
            cp /tmp/icon/reminder.svg AppDir/reminder.png 2>/dev/null || true
          fi
          
          # Create AppRun script
          cat > AppDir/AppRun << 'EOF'
          #!/bin/bash
          HERE="$(dirname "$(readlink -f "${0}")")"
          export PATH="${HERE}/usr/bin:${PATH}"
          export LD_LIBRARY_PATH="${HERE}/usr/lib:${LD_LIBRARY_PATH}"
          cd "${HERE}/usr/bin"
          exec "./reminder" "$@"
          EOF
          chmod +x AppDir/AppRun
          
      - name: Build AppImage with AppImageTool
        run: |
          # Extract AppImageTool for use in container
          ./appimagetool.AppImage --appimage-extract
          
          # Build the AppImage
          ./squashfs-root/AppRun AppDir reminder.AppImage
          
          # Make sure the AppImage is executable
          chmod +x reminder.AppImage
          
      - name: Get version info
        id: version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
            echo "is_release=true" >> $GITHUB_OUTPUT
          else
            echo "version=$(date +%Y%m%d)-$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_OUTPUT
            echo "is_release=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Rename AppImage with version
        run: |
          mv reminder.AppImage reminder-${{ steps.version.outputs.version }}.AppImage
          
      - name: Upload AppImage as artifact
        uses: actions/upload-artifact@v4
        with:
          name: reminder-appimage-${{ steps.version.outputs.version }}
          path: reminder-${{ steps.version.outputs.version }}.AppImage
          retention-days: 30
          
      - name: Create Release
        if: steps.version.outputs.is_release == 'true'
        uses: softprops/action-gh-release@v2
        with:
          files: reminder-${{ steps.version.outputs.version }}.AppImage
          tag_name: ${{ steps.version.outputs.version }}
          name: Release ${{ steps.version.outputs.version }}
          body: |
            ## Reminder AppImage Release ${{ steps.version.outputs.version }}
            
            Built on Arch Linux with PyInstaller and AppImageTool.
            
            ### Installation
            1. Download the AppImage file
            2. Make it executable: `chmod +x reminder-${{ steps.version.outputs.version }}.AppImage`
            3. Run it: `./reminder-${{ steps.version.outputs.version }}.AppImage`
            
            ### Changes
            - Auto-generated release from commit ${{ github.sha }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}